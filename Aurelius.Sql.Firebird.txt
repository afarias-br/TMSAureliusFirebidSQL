(*

  Additions to unit Aurelius.Sql.Firebird

*)

type
  TFirebirdSQLGenerator = class(TAnsiSQLGenerator)
  (..)
  protected
    function GenerateJoin(Join: TSQLJoin): string; override;
    function GenerateSelect(Command: TSelectCommand): string; override;
    procedure OptimizeLeftJoins(Command: TSelectCommand); virtual;
  (..)

implementation

uses
  (..)
  Generics.Collections, 
  Aurelius.Sql.JoinIterator;

{ TFirebirdSQLGenerator }

(..)

function TFirebirdSQLGenerator.GenerateSelect(Command: TSelectCommand): string;
begin
  OptimizeLeftJoins(Command);
  Result := inherited GenerateSelect(Command);
end;

procedure TFirebirdSQLGenerator.OptimizeLeftJoins(Command: TSelectCommand);
type
  TNodeList = TDictionary<string, TJoinNode>;

var
  Stmt: string;
  Where: TObjectList<TSQLWhereField>;
  Nodes: TNodeList;
begin
  if (Command.From is TSQLTable)
    or ((Command.WhereFields.Count=0) and (Command.WhereStatement='')) then
  begin
    Exit;
  end;

  Where := Command.WhereFields;
  if Command.WhereStatement<>'' then
    Stmt := ' ' + StringReplace(Command.WhereStatement, sLineBreak, ' ', [rfReplaceAll]);
  Stmt := StringReplace(Stmt, '(', '( ', [rfReplaceAll]);

  Nodes := TNodeList.Create;

  with TJoinIterator.Create(TSQLJoin(Command.From)) do
  try
    ForEachDo(procedure (ANode: TJoinNode)
      var
        JType: TJoinType;
        Field: TSQLWhereField;
        Prev: TJoinNode;
      begin
        if ANode.RightTable=nil then
          Exit;

        JType := TJoinType.Left;
        if Pos(Format(' %s.', [ANode.RightTable.Alias]), Stmt)>0 then
          JType := TJoinType.Inner;
        if (JType=TJoinType.Left) and (Where.Count>0) then
        begin
          for Field in Where do
          begin
            if Field.Table.Alias=ANode.RightTable.Alias then
            begin
              JType := TJoinType.Inner;
              Break;
            end;
          end;
        end;

        if (JType=TJoinType.Inner) then
        begin
          ANode.Join.JoinType := JType;
          {** NOTE:
              when a LEFT join is optimized to INNER join
              the change should be replicated all the way up
          **}
          Prev := ANode;
          while Nodes.TryGetValue(Prev.LeftTable.Alias, Prev) do
            Prev.Join.JoinType := JType;
        end;

        Nodes.Add(ANode.RightTable.Alias, ANode);
      end);
  finally
    Free;
    Nodes.Free;
  end;
end;

function TFirebirdSQLGenerator.GenerateJoin(Join: TSQLJoin): string;
var
  Stmt: string;
begin
  with TJoinIterator.Create(Join) do
  try
    ForEachDo(procedure (ANode: TJoinNode)
      var
        JoinOperator, Condition, RightSide: string;
        J: Integer;
      begin
        if ANode.RightTable<>nil then
        begin
          RightSide := GenerateRelation(ANode.RightTable);
          case ANode.Join.JoinType of
            TJoinType.Inner: JoinOperator := ' INNER JOIN ';
            TJoinType.Left:  JoinOperator := ' LEFT JOIN ';
          end;

          Condition := '';
          for J := 0 to ANode.Join.Segments.Count - 1 do
          begin
            if Condition <> '' then
              Condition := Condition + ' AND ';
            Condition := Condition +
              ANode.Join.Segments[J].PKField.Table.Alias + '.' +
              IdName(ANode.Join.Segments[J].PKField.Field) + ' = ' +
              ANode.Join.Segments[J].FKField.Table.Alias + '.' +
              IdName(ANode.Join.Segments[J].FKField.Field);
          end;

          for J := 0 to ANode.Join.CustomSegments.Count - 1 do
          begin
            if Condition <> '' then
              Condition := Condition + ' AND ';
            Condition := Condition + '(' + ANode.Join.CustomSegments[J].Condition + ')';
          end;

          Stmt := Stmt + JoinOperator + RightSide + ' ON (' + Condition + ')' + sLineBreak;
        end else
          Stmt := GenerateRelation(ANode.LeftTable) + sLineBreak;
      end);
  finally
    Free;
  end;
  Result := Stmt;
end;

(..)
